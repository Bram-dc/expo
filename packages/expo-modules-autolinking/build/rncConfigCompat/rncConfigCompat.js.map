{"version":3,"file":"rncConfigCompat.js","sourceRoot":"","sources":["../../src/rncConfigCompat/rncConfigCompat.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport { resolveDependencyConfigImplAndroidAsync } from './androidCompat';\nimport { resolveDependencyConfigImplIosAsync } from './iosCompat';\nimport { loadReactNativeConfigAsync } from './reactNativeConfig';\nimport type {\n  RncConfigCompatDependencyConfig,\n  RncConfigCompatOptions,\n  RncConfigCompatResult,\n} from './rncConfigCompat.types';\nimport { fileExistsAsync } from './utils';\nimport { getIsolatedModulesPath } from '../autolinking/utils';\nimport type { SupportedPlatform } from '../types';\n\n// TODO\n// - [ ] project react-native.config.js to override the autolinking config\n// - [ ] if @react-native-community/cli is installed, use it to generate the config\n\n/**\n * Create @react-native-community/cli compatible config for autolinking.\n */\nexport async function createRncConfigCompatAsync({\n  platform,\n  projectRoot,\n  searchPaths,\n}: RncConfigCompatOptions): Promise<RncConfigCompatResult> {\n  const dependencyRoots = await findDependencyRootsAsync(projectRoot, searchPaths);\n  const reactNativePath = dependencyRoots['react-native'];\n\n  const dependencyConfigs = await Promise.all(\n    Object.entries(dependencyRoots).map(async ([name, packageRoot]) => {\n      const config = await resolveDependencyConfigAsync(platform, name, packageRoot);\n      return [name, config];\n    })\n  );\n  const dependencyResults = Object.fromEntries<RncConfigCompatDependencyConfig>(\n    dependencyConfigs.filter(([, config]) => config != null) as Iterable<\n      [string, RncConfigCompatDependencyConfig]\n    >\n  );\n  const projectData =\n    platform === 'ios' ? { ios: { sourceDir: path.join(projectRoot, 'ios') } } : {};\n  return {\n    root: projectRoot,\n    reactNativePath,\n    dependencies: dependencyResults,\n    project: projectData,\n  };\n}\n\n/**\n * Find all dependencies and their directories from the project.\n */\nexport async function findDependencyRootsAsync(\n  projectRoot: string,\n  searchPaths: string[]\n): Promise<Record<string, string>> {\n  const packageJson = require(path.join(projectRoot, 'package.json'));\n  const dependencies = [\n    ...Object.keys(packageJson.dependencies ?? {}),\n    ...Object.keys(packageJson.devDependencies ?? {}),\n  ];\n\n  const results: Record<string, string> = {};\n  // `searchPathSet` can be mutated to discover all \"isolated modules groups\", when using isolated modules\n  const searchPathSet = new Set(searchPaths);\n\n  for (const name of dependencies) {\n    for (const searchPath of searchPathSet) {\n      const packageConfigPath = path.resolve(searchPath, name, 'package.json');\n      if (await fileExistsAsync(packageConfigPath)) {\n        const packageRoot = path.dirname(packageConfigPath);\n        results[name] = packageRoot;\n\n        const maybeIsolatedModulesPath = getIsolatedModulesPath(packageRoot, name);\n        if (maybeIsolatedModulesPath) {\n          searchPathSet.add(maybeIsolatedModulesPath);\n        }\n        break;\n      }\n    }\n  }\n\n  return results;\n}\n\nexport async function resolveDependencyConfigAsync(\n  platform: SupportedPlatform,\n  name: string,\n  packageRoot: string\n): Promise<RncConfigCompatDependencyConfig | null> {\n  const reactNativeConfig = await loadReactNativeConfigAsync(packageRoot);\n\n  if (Object.keys(reactNativeConfig?.platforms ?? {}).length > 0) {\n    // Package defines platforms would be a platform host package.\n    // The rnc-cli will skip this package.\n    // For example, the `react-native` package.\n    return null;\n  }\n\n  let platformData = null;\n  if (platform === 'android') {\n    platformData = await resolveDependencyConfigImplAndroidAsync(packageRoot, reactNativeConfig);\n  } else if (platform === 'ios') {\n    platformData = await resolveDependencyConfigImplIosAsync(packageRoot, reactNativeConfig);\n  }\n  if (!platformData) {\n    return null;\n  }\n  return {\n    root: packageRoot,\n    name,\n    platforms: {\n      [platform]: platformData,\n    },\n  };\n}\n"]}